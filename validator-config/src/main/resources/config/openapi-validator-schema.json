{
  "$schema" : "http://json-schema.org/draft-07/schema#",
  "type" : "object",
  "required" : [ "enabled", "logError", "legacyPathType", "skipBodyValidation", "validateResponse", "handleNullableField", "skipPathPrefixes" ],
  "properties" : {
    "enabled" : {
      "type" : "boolean",
      "description" : "Enable request validation. Response validation is not done on the server but client.",
      "default" : true
    },
    "logError" : {
      "type" : "boolean",
      "description" : "Log error message if validation error occurs",
      "default" : true
    },
    "legacyPathType" : {
      "type" : "boolean",
      "description" : "By default, the json-schema-validator will return the error message using JSON_POINTER path type. If you want\nto make sure that the error message is the same as the older version, you can set the legacyPathType to true."
    },
    "skipBodyValidation" : {
      "type" : "boolean",
      "description" : "Skip body validation set to true if used in light-router, light-proxy and light-spring-boot."
    },
    "validateResponse" : {
      "type" : "boolean",
      "description" : "Enable response validation."
    },
    "handleNullableField" : {
      "type" : "boolean",
      "description" : "When a field is set as nullable in the OpenAPI specification, the schema validator validates that it is nullable\nhowever continues with validation against the nullable field\n\nIf handleNullableField is set to true && incoming field is nullable && value is field: null --> succeed\nIf handleNullableField is set to false && incoming field is nullable && value is field: null --> it is up to the type\nvalidator using the SchemaValidator to handle it.",
      "default" : true
    },
    "skipPathPrefixes" : {
      "type" : "array",
      "description" : "Define a list of path prefixes to skip the validation to ease the configuration for the\nhandler.yml so that users can define some endpoints without validation even through it uses\nthe default chain. This is particularly useful in the light-gateway use case as the same\ninstance might be shared with multiple consumers and providers with different validation\nrequirement. The format is a list of strings separated with commas or a JSON list in\nvalues.yml definition from config server, or you can use yaml format in this file.",
      "items" : {
        "type" : "string"
      }
    }
  }
}
